{"version":3,"sources":["webpack:///src/components/PingoItem.vue","webpack:///src/components/MenuNavi.vue","webpack:///src/components/MemberTree.vue"],"names":[],"mappings":";AAwHA;IACA;AACA;;;;ACxEA;IACA;AACA;;;AC4BA;IACA;AACA","file":"css/vue_style.css","sourcesContent":["<template>\n    <div class=\"root\">\n        <div v-for=\"item in pingoitems\" class=\"bg-light border-top border-danger text-center mt-3\" v-if=\"valid_until_date(item.until_at)\">\n            <h3>PinGo!</h3>\n            <div class=\"text-right\">\n                <vac :time=\"countdown_deadline\" v-if=\"countdown_deadline\" class=\" text-danger\">\n                    <template slot-scope=\"props\" class=\"lionhu\">\n                        <i class=\"icon el-icon-timer\"></i> {{ props.days }} 日 {{ props.hours }} 時 {{\n                        props.minutes }} 分 {{\n                        props.seconds }} 秒\n                    </template>\n                </vac>\n\n            </div>\n            <div class=\"row \">\n                <div class=\"clearfix\"></div>\n                <div class=\"col-6\">{{item.price | currency_jpy}}</div>\n                <div class=\"col-6 text-right\">{{item.currentNum | currency}}/{{item.targetNum| currency}}</div>\n                <div class=\"clearfix\"></div>\n                <div class=\"col-12 my-3\">\n                    <a :href=\"'/store/pingo_checkout/'+item.id+'/'\">Join!</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n    import FlipCountdown from 'vue2-flip-countdown'\n    import Countdown from 'vuejs-countdown'\n    import VueCountdown from '@chenfengyuan/vue-countdown'\n    import Swal from \"sweetalert2\";\n    import moment from \"moment\";\n\n    export default {\n        name: 'pingoitems',\n        props: [\"param_pingoitems\"],\n        data() {\n            return {\n                pingoitems:[]\n            }\n        },\n        components: {\n            FlipCountdown,\n            'countdown': Countdown,\n            'vac': VueCountdown\n        },\n        computed: {\n            countdown_deadline() {\n                var deadlinestr = this.pingoitems[0].until_at.replace('T', ' ');\n                var deadline = new Date(deadlinestr);\n                var now = new Date();\n                if (deadline - now >= 0) {\n                    return deadline - now\n                } else {\n                    return 0\n                }\n            }\n        },\n        mounted() {\n            this.pingoitems=this.param_pingoitems;\n        },\n        methods: {\n            pingoitem_qty(opt) {\n                if (opt == \"plus\") {\n                    this.pingoitem.qty += 1;\n                } else if (this.pingoitem.qty > 1) {\n                    this.pingoitem.qty -= 1;\n                }\n            },\n            valid_until_date(m_date){\n                return moment(this.pingoitems[0].until_at).isAfter(Date.now())\n            },\n            async place_pingoitem_order(id) {\n                var vm=this;\n                const {value: qty} = await Swal.fire({\n                    title: 'Select qty',\n                    input: 'select',\n                    inputOptions: {\n                        1: '1',\n                        2: '2',\n                        3: '3',\n                        4: '4',\n                        5: '5',\n                    },\n                    inputPlaceholder: 'Select qty',\n                    showCancelButton: true,\n                });\n                if (qty) {\n                    var params = {\n                        id: id,\n                        qty: qty\n                    };\n                    Swal.fire({\n                        title: 'Are you sure?',\n                        showCancelButton: true,\n                        confirmButtonText: `OK`,\n                    }).then((result) => {\n                        if (result.value) {\n                            var baseUrl = \"/store/api/pingo_orders/\";\n                            axios.post(baseUrl, params).then((res) => {\n                                if (res.data.result == \"OK\") {\n                                    Swal.fire('Success!', '', 'success');\n                                    vm.$emit(\"pingoitem_operate\",\"hello\");\n                                    vm.pingoitems[0].currentNum=res.data.currentNum;\n                                }\n                            }).catch((error) => {\n                                console.log(error);\n                            })\n                        }\n                    })\n                }\n\n\n            }\n        }\n    }\n</script>\n\n<style>\n    .vuejs-countdown .digit {\n        font-size: 12px !important;\n    }\n\n</style>\n","<template>\n    <div id=\"_menunavi\">\n        <h1>Categories</h1>\n        <el-tree :data=\"tree\" :props=\"defaultProps\"\n                 highlight-current\n                 accordion\n                 @node-click=\"handleNodeClick\" >\n        </el-tree>\n\n    </div>\n</template>\n\n<script>\n    import { Tree } from 'element-ui';\n\n    export default {\n        name: 'menunavi',\n        components:{\n            \"el-tree\":Tree,\n        },\n        data() {\n            return {\n                defaultProps: {\n                    children: 'children',\n                    label: 'label'\n                }\n            }\n        },\n        computed: {\n            tree() {\n                return this.$store.state.shoppingcart.categories\n            }\n        },\n        mounted() {\n            // this.$store.dispatch(\"shoppingcart/get_shoppingcart\");\n        },\n        methods: {\n            handleNodeClick(data,node,object) {\n                // if(node.isLeaf){\n                    this.$store.dispatch(\"shoppingcart/load_category_products\",data.id);\n                // }\n                // console.log(data.id);\n                // console.log(node.isLeaf);\n                // console.log(this.$store.state.shoppingcart.products);\n            }\n        }\n    }\n</script>\n\n<style>\n.el-tree-node__label{\n    color: red!important;\n}\n</style>\n","<template>\n    <div id=\"_menunavi\">\n        <el-tree :data=\"tree\" :props=\"defaultProps\"\n                 node-key=\"user_id\"\n                 @node-drag-start=\"handleDragStart\"\n                 @node-drag-enter=\"handleDragEnter\"\n                 @node-drag-leave=\"handleDragLeave\"\n                 @node-drag-over=\"handleDragOver\"\n                 @node-drag-end=\"handleDragEnd\"\n                 @node-drop=\"handleDrop\"\n                 draggable\n                 :allow-drop=\"allowDrop\"\n                 :allow-drag=\"allowDrag\">\n        </el-tree>\n\n    </div>\n</template>\n\n<script>\n    import {Tree,Button} from 'element-ui';\n\n    export default {\n        name: 'membertree',\n        components: {\n            \"el-tree\": Tree,\n            \"el-button\":Button\n        },\n        data() {\n            return {\n                defaultProps: {\n                    children: 'children',\n                    label: 'username'\n                }\n            }\n        },\n        computed: {\n            tree() {\n                return this.$store.state.auth.membertreenodes\n            }\n        },\n        mounted() {\n            // this.$store.dispatch(\"shoppingcart/get_shoppingcart\");\n        },\n        methods: {\n            handleDragStart(node, ev) {\n                // console.log('drag start', node);\n            },\n            handleDragEnter(draggingNode, dropNode, ev) {\n                // console.log('tree drag enter: ', dropNode.label);\n            },\n            handleDragLeave(draggingNode, dropNode, ev) {\n                // console.log('tree drag leave: ', dropNode.label);\n            },\n            handleDragOver(draggingNode, dropNode, ev) {\n                // console.log('tree drag over: ', dropNode.label);\n            },\n            handleDragEnd(draggingNode, dropNode, dropType, ev) {\n                // console.log('tree drag end: ', dropNode && dropNode.label, dropType);\n            },\n            handleDrop(draggingNode, dropNode, dropType, ev) {\n            },\n            allowDrop(draggingNode, dropNode, type) {\n                // var isAllowed = type !== 'prev' && type !== \"next\"\n                // console.log(\"allowdrop type !== 'prev' && type !=='next': \" + isAllowed);\n                // if (dropNode.data.label === 'admin') {\n                //     return false;\n                // }\n                return true;\n\n            },\n\n            allowDrag(draggingNode) {\n                var isallow= draggingNode.data.username==\"admin\"?false:true;\n                return isallow;\n            },\n        }\n    }\n</script>\n\n<style>\n.el-tree-node__label{\n    color: red!important;\n}\n</style>\n"],"sourceRoot":""}